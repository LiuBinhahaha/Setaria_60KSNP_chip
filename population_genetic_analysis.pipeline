格式转换
plink --file (ped, map)
plink --bfile (bed)
#vcf2bfile: plink --vcf test.vcf --allow-extra-chr --make-bed --out test
#bfile2ped: plink --bfile test --allow-extra-chr --recode --out test

##################################################### admixture ############### ############################################
1.群体遗传结构分析(admixture)
1.1 计算不同k值的cross validation error， 选择cv-error最小时的K值作为最佳的群体分成数；或者是根据自己的材料自己确定最佳的分群数；
    for k in {1..10}; do admixture --cv ./test.bed(需要在vcf中替换scaffold为Chr，否则admixture不识别) $k > log$k.out 2>&1; done
or: for k in {1..10}; do admixture --cv ./test.bed $k | tee log$k.out; done  # tee 命令的功能是将输入（即 admixture --cv hapmap3.bed $K 命令的输出）同时写入 log${K}.out 文件，并在终端上显示出来。
查看每个k的cv error：grep 'CV error' log*.out

1.2 获得最佳分群数后，计算该k值下的群体结构：
admixture -B ./test.bed 3 -j10
explain: -B 除了使用point estimation，还将使用bootstrapping procedure 去估计standard errors，但是这个过程很耗费时间
          3 k值
          -j threads number，j和数字间不能有空格

##attention:: 如果标记数量非常大，因为标记间的LD会导致标记冗余，增加计算时间，所以要适当的缩减标记数目（根据标记间的LD关系 r2）：
              plink --bfile rawdata --indep-pairwise 50 10 0.1
        or:   plink --vcf rawdata.cvf --const-fid --allow-extra-chr --indep-pairwise 50 10 0.5 --out core_snp
##explain::   bfile 二进制文件bed
              --indep-pairwise  removal each SNP that has an R2 value of greater than 0.1 with any other SNP within a 50-SNP sliding window (step 10 SNPs each time)
              --const-fid 避免将输入数据中的样本家族ID、个体ID以及父母ID进行检查，并保持输入的文件格式
基于上一步输出的结果文件core_snp.prune.in从原来的vcf文件中提取信息：
plink --bfile rawData --extract core_snp.prune.in --make-bed --out prunedData
亦可参考网络上的代码：
plink --allow-extra-chr --extract sample_core_ld_flited1.prune.in \
--make-bed --out sample_core_ld_filted2 \
 --recode vcf-iid --vcf sample_core.vcf

#population_figs
# install pophelper package from GitHub
# remotes::install_github('royfrancis/pophelper')
library(pophelper)
setwd("C:/Users/liubi/Desktop/population_anlaysis/file.structure")

alist <- readQ(filetype="auto",list.files(path="C:/Users/liubi/Desktop/population_anlaysis/file.structure", full.names=T))

plotQ(alist, 
      exportpath=getwd(), 
      imgoutput = "join", # 图片合并
      sortind= "all", # 排序，基于聚类排序
      height = 1.2, width = 20, 
      linecol = 15, 
      indlabcol = "black",  #k值文本颜色
      showyaxis = TRUE,
      showindlab = T, # 是否对每个K值图形绘制边框
      useindlab = T, # 展示单株标签
      indlabhjust = 0.5, # 单株标签水平居中
      indlabangle = 0, # 单株标签角度
      indlabsize = 1.2, # 单株标签文本大小
      panelspacer = 0.02,   #不同k值图的间隙
      indlabspacer = 0,  #不同k值图中单株空隙
      imgtype="pdf",
      splab = paste0("K=",1:5),  #k值标签
      splabangle = 0,   #标签角度
      dpi = 600,  #输出分辨率
      outputfilename = paste0("test_pop"),  #输出文件的名称
      #units = "cm",   #输出文件的大小
      showlegend = TRUE,
      showdiv = FALSE,
      sharedindlab = FALSE
      )


#引入分组信息
pop <- read.table('C:/Users/liubi/Desktop/population_anlaysis/group.txt', header = F, sep = '\t', stringsAsFactors = F,row.names = 1)
pop

P2 <- plotQ(alist,imgoutput = "join",
            imgtype = "png",  #输出格式的变化
            height = 1.2,width = 20,
            showindlab = T,useindlab = T,sharedindlab = T,
            showsp = T,sppos = "left",splab = paste0("K=",1:5),splabangle = 180,
            showlegend = F,ordergrp = T,grplab = pop,   #添加分组
            subsetgrp = LETTERS[1:5],  #添加组名
            dpi = 600,
            outputfilename = paste0("structure_barplot_pop1"),units = "cm",
            exportpath = getwd())

#K值图不会共享单株标签名,且只在 imgoutput = "join"时有效
# 存放Q文件的文件夹只能放Q文件

group.txt:
1	A
2	A
3	A
4	A
5	A
6	A
7	A
8	A
9	A
10	B
11	B
12	B
13	B
14	B
15	B
16	B
17	B
18	C
19	C
20	C
21	C
22	C
23	C
24	C
25	C
26	C



#################################################### # PCA ################################################################
2. PCA 主成分分析(GCTA, genome-wide complex traits analysis)
根据SNP关系计算遗传关系矩阵(Genetic relationship matrix, GRM)，格式为gcta可识别的.bin格式：
plink --file test --allow-extra-chr --make-grm-bin --out test --autosome-num 20
还可以使用gcta64 --bfile test --make-grm --make-grm-alg 1 --out test_  (默认的Yang 方法：--make-grm-alg 0  Van的方法：--make-grm-alg 1)
但是在计算中发现使用gcta64时，染色体名称必须是chr，而测试文件是scaffold，所以测试时使用了plink计算遗传关系矩阵

2.1主成分分析: 
  gcta64 --grm test --pca 20 --out pca
  pca.eigenval 特征值
  pca.eigenvec 特征向量

#PCA_Fig
提取前三个特征向量R画图:
setwd("/vol/liubin/NX15/QC_variants/filtered_snp_indel/test_pca")

# 处理特征向量文件
eigenvec <- read.table("pca.eigenvec", quote="\"", comment.char="")
colnames(eigenvec)<-c("FID","sample",paste0("PC",1:20))  # 添加列名称
write.table(eigenvec[2:ncol(eigenvec)],file = "pca.eigenvector.tsv",sep = "\t",row.names = F,col.names = T,quote = F)

# 处理特征值文件
eigenval <- read.table("pca.eigenval", quote="\"", comment.char="")
pcs<-paste0("pc",1:nrow(eigenval))
eigenval[nrow(eigenval),1]<-0  # 最后一行第一列修改为 0

# 计算解释率
percentage<-eigenval$V1/sum(eigenval$V1)*100  # 每个值除以均值*100

eigenval_df<-as.data.frame(cbind(pcs,eigenval[,1],percentage),stringsAsFactors = F)  # 合并数据框
names(eigenval_df)<-c("pcs","variance","proportation")
eigenval_df$variance<-as.numeric(eigenval_df$variance)
eigenval_df$proportation<-as.numeric(eigenval_df$proportation)
write.table(eigenval_df,file = "pca.eigenvalue.tsv",sep = "\t",quote = F,row.names = F,col.names = T)
head(eigenval_df)

eigvec <-read.table("pca.eigenvector.tsv",header = T)
eigval <- read.table("pca.eigenvalue.tsv",header = T)
# 整理pop文件，order为序号，group为群体结构分群结果(group分组；color每个组的颜色，pch每个组点的形状）
popinfo <- read.csv("pop.csv")
head(popinfo)

# 查看pop文件
'''
order exp_id vcf_id group   color pch
1     1      1      1    G2 #9ACD32  16
2     2      2      2    G2 #9ACD32  16
3     3      3      3    G2 #9ACD32  16
4     4      4      4    G2 #9ACD32  16
5     5      5      5    G2 #9ACD32  16
6     6      6      6    G2 #9ACD32  16
'''
pop <- unique(popinfo[,2:4])
print(pop)
'''
group   color pch
1     G2 #9ACD32  16
55    G1 #FF4500  15
62    G3 #6495ED  17
'''

# 3Dfig
library("ggplot2")
group=popinfo$group
pch=popinfo$pch
color=popinfo$color
pdf("pca_pc1 vs. pc2.pdf", width = 8,height = 6)
p <- ggplot(data = eigvec, aes(x = PC1, y = PC2, group = group)) +
  geom_point(alpha = 1,col=color,pch=pch)+
  stat_ellipse(geom = "polygon",alpha=0.5,level = 0.95,aes(fill=group))+ #置信区间
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey",size=1)+
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey",size=1)+
  theme_bw()+
  theme(panel.grid = element_blank())+
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1.5))+ #边框
  theme(legend.text = element_text(size = 16, face = "bold.italic"),legend.title = element_blank())+ #图例
  xlab(paste0("PC1 (", round(eigval[eigval$pcs == "pc1", 3], 2), "%)"))+ ylab(paste0("PC2 (", round(eigval[eigval$pcs == "pc2", 3], 2), "%)")) +  # 添加PC123的解释率，根据pca.eigenval文件
  theme(axis.title.x = element_text(face = "bold", size = 18, colour = "black"),axis.title.y = element_text(face = "bold", size = 18, colour = "black"),axis.text.x = element_text(size = 14,face = "bold", colour = "black"),axis.text.y = element_text(face = "bold", size = 14, colour = "black"))
print(p)
dev.off()


library(scatterplot3d)
library(grDevices)
x_lab <- paste0("PC1 (", round(eigval[eigval$pcs == "pc1", 3], 2), "%)")
y_lab <- paste0("PC2 (", round(eigval[eigval$pcs == "pc2", 3], 2), "%)")
z_lab <- paste0("PC3 (", round(eigval[eigval$pcs == "pc3", 3], 2), "%)")
pdf("pca_3d.pdf",width = 8,height = 6)
scatterplot3d(x =eigvec$PC1, y = eigvec$PC2, z=eigvec$PC3, 
              color = color,pch = pch,
              xlab=x_lab, ylab=y_lab, zlab=z_lab,
              angle=45,type = "p",
              mar = c(3.5,3.5,3.5,6),
              cex.symbols = 1.5, cex.axis = 1, cex.lab = 1.5,
              font.axis = 2, font.lab = 2, scale.y = 1)
legend("topright", legend = pop$group,
        col = pop$color, 
        pch = pop$pch, 
        inset = -0.1, xpd = TRUE, horiz = TRUE)
dev.off()


########################################################## tree ######################################################
3. 系统发育分析(VCF2Dis)
3.1 计算遗传距离矩阵：
VCF2Dis -InPut in.vcf.gz -OutPut p_dis.mat
3.2 上传至FastMe2.0获得距离树文件 .nwk
3.3 上传至iTOL美化，添加颜色。

颜色文件格式：
tree_color.txt
TREE_COLORS				
SEPARATOR TAB				
DATA				
C12	branch	#C30078	normal	1
C13	branch	#C30078	normal	1
C14	branch	#C30078	normal	1
C15	branch	#C30078	normal	1
C26	branch	#C30078	normal	1
C28	branch	#C30078	normal	1
C30	branch	#4370B4	normal	1
C33	branch	#4370B4	normal	1
C34	branch	#4370B4	normal	1
C35	branch	#4370B4	normal	1
C36	branch	#4370B4	normal	1
C6	branch	#549F9A	normal	1
C7	branch	#549F9A	normal	1
C8	branch	#549F9A	normal	1

